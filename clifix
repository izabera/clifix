#!/bin/bash

# clifix: zsh-like correction

if declare -f command_not_found_handle >/dev/null; then
  eval before_clifix_"$(declare -f command_not_found_handle)"
fi

command_not_found_handle() {
  local FUNCNEST=10
  if [[ -z $1 ]]; then
    printf "%s: command not found: %s\n" "$0" "$1" >&2
    return 127
  fi
  [[ -r ~/.config/clifix/corrections ]] && source ~/.config/clifix/corrections
  declare -A {always,maybe}_correct
  if [[ ${always_correct[$1]+x} ]]; then
    "${always_correct[$1]}" "${@:2}"
    return
  fi
  if [[ ${maybe_correct[$1]+x} ]]; then
    ask_correction "$1" "${maybe_correct[$1]}" "${@:2}"
    return
  fi

  # don't correct to aliases
  unalias -a

  local cmd
  # only search for commands that are ${#1} +/-1 long
  while read -r -u7 cmd; do
    if spdist "$1" "$cmd"; then
      ask_correction "$1" "$cmd" "${@:2}"
      return
    fi
  done 7< <(compgen -c | awk -v "len=${#1}" '!a[$0]++ && len >= length - 1 && len <= length + 1')

  # search for a command that starts with $1 but it's longer than ${#1} + 1 characters
  if read -r -u7 cmd; then
    ask_correction "$1" "$cmd" "${@:2}"
    return
  fi 7< <(compgen -c -- "$1" | awk -v "len=${#1}" "length > len + 1")

  if declare -f before_clifix_command_not_found_handle >/dev/null; then
    before_clifix_command_not_found_handle "$@"
  else
    printf "%s: command not found: %q\n" "$0" "$1" >&2
    return 127
  fi
}

ask_correction() {
  local answer
  printf "%s: correct '%s' to '%s' [nya]? " "$0" "$1" "$2" >/dev/tty
  while [[ $answer != [nNyYaA] ]]; do
    read -rsn1 answer < /dev/tty
  done
  echo "$answer"
  case $answer in
    A|a) always_correct[$1]=$2
         unset 'maybe_correct[$1]'
         declare -p {always,maybe}_correct > ~/.config/clifix/corrections 2>/dev/null
         "${always_correct[$1]}" "${@:3}" ;;
    N|n) printf "%s: command not found: %s\n" "$0" "$1" >/dev/tty
         return 127 ;;
    Y|y) maybe_correct[$1]=$2
         declare -p {always,maybe}_correct > ~/.config/clifix/corrections 2>/dev/null
         "$2" "${@:3}"
  esac
}

# spdist ported from c to bash
# original: lib/sh/spell.c
spdist() {
  local cur=$1 new=$2 i
  while [[ ${1:i:1} = "${2:i:1}" ]]; do (( i++ )); done
  cur=${1:i} new=${2:i}
  if [[ ${cur:0:1} = "${new:1:1}" && ${cur:1:1} = "${new::1}" &&
        ${cur:1:1} = "${new::1}" && ${cur:2} = "${new:2}" ]]; then return
  elif [[ ${cur:1} = "${new:1}" ]]; then return
  elif [[ ${cur:1} = "$new" ]]; then return
  elif [[ ${new:1} = "$cur" ]]; then return
  else return 1
  fi
}

# use this to display active corrections or add more manually
typo_correct () {
  local arg; declare -A {always,maybe}_correct
  [[ -r ~/.config/clifix/corrections ]] && source ~/.config/clifix/corrections
  if (($#)); then   # if with args, set new corrections
    for arg do
      case $arg in
        ?*=*) always_correct[${arg%%=*}]=${arg#*=} ;;
        *) printf "Error: unknown argument: %s\n" "$arg" ;;
      esac
    done
    declare -p {always,maybe}_correct > ~/.config/clifix/corrections 2>/dev/null || :
  else              # otherwise print them
    for arg in "${!always_correct[@]}"; do
      printf "%s=%s\n" "$arg" "${always_correct[$arg]}"
    done
  fi
}

